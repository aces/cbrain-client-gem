=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module CbrainClient
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the list of Tasks.
    # This method returns the list of Tasks accessible to the current user. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number when paginating. See also the per_page parameter
    # @option opts [Integer] :per_page Size of each page when paginating. See also the page parameter
    # @return [Array<CbrainTask>]
    def tasks_get(opts = {})
      data, _status_code, _headers = tasks_get_with_http_info(opts)
      data
    end

    # Get the list of Tasks.
    # This method returns the list of Tasks accessible to the current user. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number when paginating. See also the per_page parameter
    # @option opts [Integer] :per_page Size of each page when paginating. See also the page parameter
    # @return [Array<(Array<CbrainTask>, Fixnum, Hash)>] Array<CbrainTask> data, response status code and response headers
    def tasks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.tasks_get ...'
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CbrainTask>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information on a Task.
    # This method returns information on a Task, including its status, Task restartability and information on where the results are kept. 
    # @param id The ID number of the Task to delete.
    # @param [Hash] opts the optional parameters
    # @return [CbrainTask]
    def tasks_id_get(id, opts = {})
      data, _status_code, _headers = tasks_id_get_with_http_info(id, opts)
      data
    end

    # Get information on a Task.
    # This method returns information on a Task, including its status, Task restartability and information on where the results are kept. 
    # @param id The ID number of the Task to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CbrainTask, Fixnum, Hash)>] CbrainTask data, response status code and response headers
    def tasks_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.tasks_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TasksApi.tasks_id_get"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CbrainTask')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Task.
    # This method allows the creation of a new Task. 
    # @param cbrain_task The task to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<CbrainTask>]
    def tasks_post(cbrain_task, opts = {})
      data, _status_code, _headers = tasks_post_with_http_info(cbrain_task, opts)
      data
    end

    # Create a new Task.
    # This method allows the creation of a new Task. 
    # @param cbrain_task The task to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CbrainTask>, Fixnum, Hash)>] Array<CbrainTask> data, response status code and response headers
    def tasks_post_with_http_info(cbrain_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TasksApi.tasks_post ...'
      end
      # verify the required parameter 'cbrain_task' is set
      if @api_client.config.client_side_validation && cbrain_task.nil?
        fail ArgumentError, "Missing the required parameter 'cbrain_task' when calling TasksApi.tasks_post"
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cbrain_task)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CbrainTask>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
