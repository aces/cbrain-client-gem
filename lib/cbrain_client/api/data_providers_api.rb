=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CbrainClient
  class DataProvidersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of the Data Providers available to the current user.
    # This method returns a list of Data Provider objects that represent servers with disk space accessible for storing Userfiles. 
    # @param [Hash] opts the optional parameters
    # @return [Array<DataProvider>]
    def data_providers_get(opts = {})
      data, _status_code, _headers = data_providers_get_with_http_info(opts)
      return data
    end

    # Get a list of the Data Providers available to the current user.
    # This method returns a list of Data Provider objects that represent servers with disk space accessible for storing Userfiles. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DataProvider>, Fixnum, Hash)>] Array<DataProvider> data, response status code and response headers
    def data_providers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_get ..."
      end
      # resource path
      local_var_path = "/data_providers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DataProvider>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the files on a Data Provider.
    # This method allows the inspection of what files are present on a Data Provider specified by the ID parameter. Files that are not yet registered as Userfiles are visible using this method, as well as regularly accessible Userfiles. 
    # @param id The ID of the Data Provider to browse.
    # @param [Hash] opts the optional parameters
    # @return [Array<FileInfo>]
    def data_providers_id_browse_get(id, opts = {})
      data, _status_code, _headers = data_providers_id_browse_get_with_http_info(id, opts)
      return data
    end

    # List the files on a Data Provider.
    # This method allows the inspection of what files are present on a Data Provider specified by the ID parameter. Files that are not yet registered as Userfiles are visible using this method, as well as regularly accessible Userfiles. 
    # @param id The ID of the Data Provider to browse.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FileInfo>, Fixnum, Hash)>] Array<FileInfo> data, response status code and response headers
    def data_providers_id_browse_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_browse_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_browse_get"
      end
      # resource path
      local_var_path = "/data_providers/{id}/browse".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FileInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_browse_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes unregistered files from a CBRAIN Data provider.
    # This method allows files that have not been registered from CBRAIN to be deleted. This may be necessary if files were uploaded in error, or if they were unregistered but not immediately deleted. 
    # @param id The ID of the Data Provider to delete files from.
    # @param multi_registration_mod_req Arrays containing the files to delete.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationInfo]
    def data_providers_id_delete_post(id, multi_registration_mod_req, opts = {})
      data, _status_code, _headers = data_providers_id_delete_post_with_http_info(id, multi_registration_mod_req, opts)
      return data
    end

    # Deletes unregistered files from a CBRAIN Data provider.
    # This method allows files that have not been registered from CBRAIN to be deleted. This may be necessary if files were uploaded in error, or if they were unregistered but not immediately deleted. 
    # @param id The ID of the Data Provider to delete files from.
    # @param multi_registration_mod_req Arrays containing the files to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationInfo, Fixnum, Hash)>] RegistrationInfo data, response status code and response headers
    def data_providers_id_delete_post_with_http_info(id, multi_registration_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_delete_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_delete_post"
      end
      # verify the required parameter 'multi_registration_mod_req' is set
      if @api_client.config.client_side_validation && multi_registration_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_registration_mod_req' when calling DataProvidersApi.data_providers_id_delete_post"
      end
      # resource path
      local_var_path = "/data_providers/{id}/delete".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_registration_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information on a particular Data Provider.
    # This method returns a single Data Provider specified by the ID parameter 
    # @param id ID of the Data Provider to get information on.
    # @param [Hash] opts the optional parameters
    # @return [DataProvider]
    def data_providers_id_get(id, opts = {})
      data, _status_code, _headers = data_providers_id_get_with_http_info(id, opts)
      return data
    end

    # Get information on a particular Data Provider.
    # This method returns a single Data Provider specified by the ID parameter 
    # @param id ID of the Data Provider to get information on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataProvider, Fixnum, Hash)>] DataProvider data, response status code and response headers
    def data_providers_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_get"
      end
      # resource path
      local_var_path = "/data_providers/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataProvider')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pings a Data Provider to check if it is running.
    # This method allows the querying of a Data Provider specified by the ID parameter to see if it is running or not. 
    # @param id The ID of the Data Provider to query.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def data_providers_id_is_alive_get(id, opts = {})
      data, _status_code, _headers = data_providers_id_is_alive_get_with_http_info(id, opts)
      return data
    end

    # Pings a Data Provider to check if it is running.
    # This method allows the querying of a Data Provider specified by the ID parameter to see if it is running or not. 
    # @param id The ID of the Data Provider to query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def data_providers_id_is_alive_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_is_alive_get ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_is_alive_get"
      end
      # resource path
      local_var_path = "/data_providers/{id}/is_alive".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_is_alive_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers a file as a Userfile in CBRAIN.
    # This method allows new files to be added to CBRAIN. The files must first be transfered to the Data Provider via SFTP. For more information on SFTP file transfers, consult the CBRAIN Wiki documentation. Once files are present on the Data Provider, this method registers them in CBRAIN by specifying the file type. You can also specify to copy/move the files to another Data Provider after file registration. 
    # @param id The ID of the Data Provider to register files on.
    # @param multi_registration_mod_req Arrays containing the filenames and types to register.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationInfo]
    def data_providers_id_register_post(id, multi_registration_mod_req, opts = {})
      data, _status_code, _headers = data_providers_id_register_post_with_http_info(id, multi_registration_mod_req, opts)
      return data
    end

    # Registers a file as a Userfile in CBRAIN.
    # This method allows new files to be added to CBRAIN. The files must first be transfered to the Data Provider via SFTP. For more information on SFTP file transfers, consult the CBRAIN Wiki documentation. Once files are present on the Data Provider, this method registers them in CBRAIN by specifying the file type. You can also specify to copy/move the files to another Data Provider after file registration. 
    # @param id The ID of the Data Provider to register files on.
    # @param multi_registration_mod_req Arrays containing the filenames and types to register.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationInfo, Fixnum, Hash)>] RegistrationInfo data, response status code and response headers
    def data_providers_id_register_post_with_http_info(id, multi_registration_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_register_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_register_post"
      end
      # verify the required parameter 'multi_registration_mod_req' is set
      if @api_client.config.client_side_validation && multi_registration_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_registration_mod_req' when calling DataProvidersApi.data_providers_id_register_post"
      end
      # resource path
      local_var_path = "/data_providers/{id}/register".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_registration_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_register_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregisters files as Userfile in CBRAIN.
    # This method allows files to be unregistered from CBRAIN. This will not delete the files, but removes them from the CBRAIN database, so Tools may no longer be run on them. 
    # @param id The ID of the Data Provider to unregister files from.
    # @param multi_registration_mod_req Arrays containing the filenames to unregister.
    # @param [Hash] opts the optional parameters
    # @return [RegistrationInfo]
    def data_providers_id_unregister_post(id, multi_registration_mod_req, opts = {})
      data, _status_code, _headers = data_providers_id_unregister_post_with_http_info(id, multi_registration_mod_req, opts)
      return data
    end

    # Unregisters files as Userfile in CBRAIN.
    # This method allows files to be unregistered from CBRAIN. This will not delete the files, but removes them from the CBRAIN database, so Tools may no longer be run on them. 
    # @param id The ID of the Data Provider to unregister files from.
    # @param multi_registration_mod_req Arrays containing the filenames to unregister.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegistrationInfo, Fixnum, Hash)>] RegistrationInfo data, response status code and response headers
    def data_providers_id_unregister_post_with_http_info(id, multi_registration_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataProvidersApi.data_providers_id_unregister_post ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DataProvidersApi.data_providers_id_unregister_post"
      end
      # verify the required parameter 'multi_registration_mod_req' is set
      if @api_client.config.client_side_validation && multi_registration_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_registration_mod_req' when calling DataProvidersApi.data_providers_id_unregister_post"
      end
      # resource path
      local_var_path = "/data_providers/{id}/unregister".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_registration_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataProvidersApi#data_providers_id_unregister_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
