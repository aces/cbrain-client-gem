=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module CbrainClient
  class TagsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of the tags currently in CBRAIN.
    # This method returns a list of tag objects. 
    # @param [Hash] opts the optional parameters
    # @return [Array<Tag>]
    def tags_get(opts = {})
      data, _status_code, _headers = tags_get_with_http_info(opts)
      data
    end

    # Get a list of the tags currently in CBRAIN.
    # This method returns a list of tag objects. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Tag>, Fixnum, Hash)>] Array<Tag> data, response status code and response headers
    def tags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.tags_get ...'
      end
      # resource path
      local_var_path = '/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Tag>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a tag.
    # Delete the tag specified by the ID parameter.
    # @param id ID of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tags_id_delete(id, opts = {})
      tags_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a tag.
    # Delete the tag specified by the ID parameter.
    # @param id ID of the tag to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def tags_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.tags_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagsApi.tags_id_delete"
      end
      # resource path
      local_var_path = '/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#tags_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get one tag.
    # Returns a single tag with the ID specified. 
    # @param id The ID of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def tags_id_get(id, opts = {})
      data, _status_code, _headers = tags_id_get_with_http_info(id, opts)
      data
    end

    # Get one tag.
    # Returns a single tag with the ID specified. 
    # @param id The ID of the tag to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Fixnum, Hash)>] Tag data, response status code and response headers
    def tags_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.tags_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagsApi.tags_id_get"
      end
      # resource path
      local_var_path = '/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#tags_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a tag.
    # Update the tag specified by the ID parameter.
    # @param id ID of the tag to update.
    # @param tag_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tags_id_put(id, tag_mod_req, opts = {})
      tags_id_put_with_http_info(id, tag_mod_req, opts)
      nil
    end

    # Update a tag.
    # Update the tag specified by the ID parameter.
    # @param id ID of the tag to update.
    # @param tag_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def tags_id_put_with_http_info(id, tag_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.tags_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagsApi.tags_id_put"
      end
      # verify the required parameter 'tag_mod_req' is set
      if @api_client.config.client_side_validation && tag_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'tag_mod_req' when calling TagsApi.tags_id_put"
      end
      # resource path
      local_var_path = '/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tag_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#tags_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new tag.
    # Create a new tag in CBRAIN. 
    # @param tag_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def tags_post(tag_mod_req, opts = {})
      data, _status_code, _headers = tags_post_with_http_info(tag_mod_req, opts)
      data
    end

    # Create a new tag.
    # Create a new tag in CBRAIN. 
    # @param tag_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Fixnum, Hash)>] Tag data, response status code and response headers
    def tags_post_with_http_info(tag_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagsApi.tags_post ...'
      end
      # verify the required parameter 'tag_mod_req' is set
      if @api_client.config.client_side_validation && tag_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'tag_mod_req' when calling TagsApi.tags_post"
      end
      # resource path
      local_var_path = '/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tag_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#tags_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
