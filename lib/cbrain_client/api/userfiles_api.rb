=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module CbrainClient
  class UserfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Moves the Userfiles from their current Data Provider to a new one.
    # @param multi_userfile_mod_req The IDs of the files to move.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_change_provider_post(multi_userfile_mod_req, opts = {})
      userfiles_change_provider_post_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Moves the Userfiles from their current Data Provider to a new one.
    # @param multi_userfile_mod_req The IDs of the files to move.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_change_provider_post_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_change_provider_post ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_change_provider_post"
      end
      # resource path
      local_var_path = '/userfiles/change_provider'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_change_provider_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compresses many Userfiles each into their own GZIP archive.
    # @param multi_userfile_mod_req The IDs of the files to compress.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_compress_post(multi_userfile_mod_req, opts = {})
      userfiles_compress_post_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Compresses many Userfiles each into their own GZIP archive.
    # @param multi_userfile_mod_req The IDs of the files to compress.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_compress_post_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_compress_post ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_compress_post"
      end
      # resource path
      local_var_path = '/userfiles/compress'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_compress_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete several files that have been registered as Userfiles
    # @param multi_userfile_mod_req The IDs of the files to destroy.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_delete_files_delete(multi_userfile_mod_req, opts = {})
      userfiles_delete_files_delete_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Delete several files that have been registered as Userfiles
    # @param multi_userfile_mod_req The IDs of the files to destroy.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_delete_files_delete_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_delete_files_delete ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_delete_files_delete"
      end
      # resource path
      local_var_path = '/userfiles/delete_files'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_delete_files_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download several files
    # This method compresses several Userfiles in .gz format and prepares them to be downloaded.
    # @param multi_userfile_mod_req The IDs of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_download_post(multi_userfile_mod_req, opts = {})
      userfiles_download_post_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Download several files
    # This method compresses several Userfiles in .gz format and prepares them to be downloaded.
    # @param multi_userfile_mod_req The IDs of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_download_post_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_download_post ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_download_post"
      end
      # resource path
      local_var_path = '/userfiles/download'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_download_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of the Userfiles accessible to the current user.
    # This method returns a list of Userfiles that are available to the current User. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number when paginating. See also the per_page parameter
    # @option opts [Integer] :per_page Size of each page when paginating. See also the page parameter
    # @return [Array<Userfile>]
    def userfiles_get(opts = {})
      data, _status_code, _headers = userfiles_get_with_http_info(opts)
      data
    end

    # List of the Userfiles accessible to the current user.
    # This method returns a list of Userfiles that are available to the current User. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number when paginating. See also the per_page parameter
    # @option opts [Integer] :per_page Size of each page when paginating. See also the page parameter
    # @return [Array<(Array<Userfile>, Fixnum, Hash)>] Array<Userfile> data, response status code and response headers
    def userfiles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_get ...'
      end
      # resource path
      local_var_path = '/userfiles'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Userfile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the content of a Userfile
    # This method allows you to download the content of a userfile.
    # @param id The ID number of the Userfile to download
    # @param [Hash] opts the optional parameters
    # @return [String]
    def userfiles_id_content_get(id, opts = {})
      data, _status_code, _headers = userfiles_id_content_get_with_http_info(id, opts)
      data
    end

    # Get the content of a Userfile
    # This method allows you to download the content of a userfile.
    # @param id The ID number of the Userfile to download
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def userfiles_id_content_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_id_content_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserfilesApi.userfiles_id_content_get"
      end
      # resource path
      local_var_path = '/userfiles/{id}/content'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_id_content_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information on a Userfile.
    # This method returns information about a single Userfile, specified by its ID. Information returned includes the ID of the owner, the Group (project) it is a part of, a description, information about where the acutal copy of the file currently is, and what the status is of any synhronization operations that may have been requested. 
    # @param id The ID number of the Userfile to get information on.
    # @param [Hash] opts the optional parameters
    # @return [Userfile]
    def userfiles_id_get(id, opts = {})
      data, _status_code, _headers = userfiles_id_get_with_http_info(id, opts)
      data
    end

    # Get information on a Userfile.
    # This method returns information about a single Userfile, specified by its ID. Information returned includes the ID of the owner, the Group (project) it is a part of, a description, information about where the acutal copy of the file currently is, and what the status is of any synhronization operations that may have been requested. 
    # @param id The ID number of the Userfile to get information on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Userfile, Fixnum, Hash)>] Userfile data, response status code and response headers
    def userfiles_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserfilesApi.userfiles_id_get"
      end
      # resource path
      local_var_path = '/userfiles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Userfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update information on a Userfile.
    # This method allows a User to update information on a userfile. 
    # @param id The ID number of the Userfile to update.
    # @param userfile_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_id_put(id, userfile_mod_req, opts = {})
      userfiles_id_put_with_http_info(id, userfile_mod_req, opts)
      nil
    end

    # Update information on a Userfile.
    # This method allows a User to update information on a userfile. 
    # @param id The ID number of the Userfile to update.
    # @param userfile_mod_req 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_id_put_with_http_info(id, userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserfilesApi.userfiles_id_put"
      end
      # verify the required parameter 'userfile_mod_req' is set
      if @api_client.config.client_side_validation && userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'userfile_mod_req' when calling UserfilesApi.userfiles_id_put"
      end
      # resource path
      local_var_path = '/userfiles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new Userfile and upload its content.
    # This method creates a new Userfile in CBRAIN, with the current user as the owner of the file. 
    # @param upload_file File content to upload to CBRAIN
    # @param data_provider_id The ID of the Data Provider to upload the file to.
    # @param userfile_group_id ID of the group that will have access to the Userfile
    # @param file_type The type of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_do_extract set to the string &#39;on&#39; to indicate that the uploaded content is a tar.gz or .zip archive that need to be extracted. See also the parameter _up_ex_mode
    # @option opts [String] :_up_ex_mode if &#39;_do_extract&#39; is set to &#39;on&#39;, set this to &#39;collection&#39; to create a single collection, or &#39;multiple&#39; to create one file per entry in the uploaded content
    # @return [Object]
    def userfiles_post(upload_file, data_provider_id, userfile_group_id, file_type, opts = {})
      data, _status_code, _headers = userfiles_post_with_http_info(upload_file, data_provider_id, userfile_group_id, file_type, opts)
      data
    end

    # Creates a new Userfile and upload its content.
    # This method creates a new Userfile in CBRAIN, with the current user as the owner of the file. 
    # @param upload_file File content to upload to CBRAIN
    # @param data_provider_id The ID of the Data Provider to upload the file to.
    # @param userfile_group_id ID of the group that will have access to the Userfile
    # @param file_type The type of the file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_do_extract set to the string &#39;on&#39; to indicate that the uploaded content is a tar.gz or .zip archive that need to be extracted. See also the parameter _up_ex_mode
    # @option opts [String] :_up_ex_mode if &#39;_do_extract&#39; is set to &#39;on&#39;, set this to &#39;collection&#39; to create a single collection, or &#39;multiple&#39; to create one file per entry in the uploaded content
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def userfiles_post_with_http_info(upload_file, data_provider_id, userfile_group_id, file_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_post ...'
      end
      # verify the required parameter 'upload_file' is set
      if @api_client.config.client_side_validation && upload_file.nil?
        fail ArgumentError, "Missing the required parameter 'upload_file' when calling UserfilesApi.userfiles_post"
      end
      # verify the required parameter 'data_provider_id' is set
      if @api_client.config.client_side_validation && data_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_provider_id' when calling UserfilesApi.userfiles_post"
      end
      # verify the required parameter 'userfile_group_id' is set
      if @api_client.config.client_side_validation && userfile_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'userfile_group_id' when calling UserfilesApi.userfiles_post"
      end
      # verify the required parameter 'file_type' is set
      if @api_client.config.client_side_validation && file_type.nil?
        fail ArgumentError, "Missing the required parameter 'file_type' when calling UserfilesApi.userfiles_post"
      end
      # resource path
      local_var_path = '/userfiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['upload_file'] = upload_file
      form_params['data_provider_id'] = data_provider_id
      form_params['userfile[group_id]'] = userfile_group_id
      form_params['file_type'] = file_type
      form_params['_do_extract'] = opts[:'_do_extract'] if !opts[:'_do_extract'].nil?
      form_params['_up_ex_mode'] = opts[:'_up_ex_mode'] if !opts[:'_up_ex_mode'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Syncs Userfiles to the local Data Providers cache.
    # Synchronizing files to their the local cache allows you to download, visualize and do processing on them that is not available if not synced. CBRAIN operations will sync files automatically, and this is only necessary if a file is changed on its host Data Provdier by an external process.
    # @param multi_userfile_mod_req The IDs of the files to synchronize.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_sync_multiple_post(multi_userfile_mod_req, opts = {})
      userfiles_sync_multiple_post_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Syncs Userfiles to the local Data Providers cache.
    # Synchronizing files to their the local cache allows you to download, visualize and do processing on them that is not available if not synced. CBRAIN operations will sync files automatically, and this is only necessary if a file is changed on its host Data Provdier by an external process.
    # @param multi_userfile_mod_req The IDs of the files to synchronize.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_sync_multiple_post_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_sync_multiple_post ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_sync_multiple_post"
      end
      # resource path
      local_var_path = '/userfiles/sync_multiple'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_sync_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uncompresses many Userfiles.
    # @param multi_userfile_mod_req The IDs of the files to uncompress.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def userfiles_uncompress_post(multi_userfile_mod_req, opts = {})
      userfiles_uncompress_post_with_http_info(multi_userfile_mod_req, opts)
      nil
    end

    # Uncompresses many Userfiles.
    # @param multi_userfile_mod_req The IDs of the files to uncompress.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def userfiles_uncompress_post_with_http_info(multi_userfile_mod_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserfilesApi.userfiles_uncompress_post ...'
      end
      # verify the required parameter 'multi_userfile_mod_req' is set
      if @api_client.config.client_side_validation && multi_userfile_mod_req.nil?
        fail ArgumentError, "Missing the required parameter 'multi_userfile_mod_req' when calling UserfilesApi.userfiles_uncompress_post"
      end
      # resource path
      local_var_path = '/userfiles/uncompress'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(multi_userfile_mod_req)
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserfilesApi#userfiles_uncompress_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
