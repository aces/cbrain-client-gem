=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'uri'

module CbrainClient
  class SessionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Destroy the current session
    # This destroys the current session, effectively terminating the access to the service. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def session_delete(opts = {})
      session_delete_with_http_info(opts)
      nil
    end

    # Destroy the current session
    # This destroys the current session, effectively terminating the access to the service. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def session_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.session_delete ...'
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#session_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get session information
    # This returns information about the current session. 
    # @param [Hash] opts the optional parameters
    # @return [SessionInfo]
    def session_get(opts = {})
      data, _status_code, _headers = session_get_with_http_info(opts)
      data
    end

    # Get session information
    # This returns information about the current session. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionInfo, Fixnum, Hash)>] SessionInfo data, response status code and response headers
    def session_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.session_get ...'
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BrainPortalSession']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#session_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new session
    # This is the main entry point to create a CBRAIN session. Note that if a user is currently logged in, a new session will not be created, and the current session will be re-used. 
    # @param login The username of the user trying to connect.
    # @param password The password of the user
    # @param [Hash] opts the optional parameters
    # @return [SessionInfo]
    def session_post(login, password, opts = {})
      data, _status_code, _headers = session_post_with_http_info(login, password, opts)
      data
    end

    # Create a new session
    # This is the main entry point to create a CBRAIN session. Note that if a user is currently logged in, a new session will not be created, and the current session will be re-used. 
    # @param login The username of the user trying to connect.
    # @param password The password of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionInfo, Fixnum, Hash)>] SessionInfo data, response status code and response headers
    def session_post_with_http_info(login, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionsApi.session_post ...'
      end
      # verify the required parameter 'login' is set
      if @api_client.config.client_side_validation && login.nil?
        fail ArgumentError, "Missing the required parameter 'login' when calling SessionsApi.session_post"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling SessionsApi.session_post"
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['login'] = login
      form_params['password'] = password

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SessionInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionsApi#session_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
