=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.4

=end

require 'date'

module CbrainClient
  class FileInfo
    # id of the userfile
    attr_accessor :userfile_id

    # the base filename
    attr_accessor :name

    # string representation of gid, the name of the group
    attr_accessor :group

    # numeric group id of the file
    attr_accessor :gid

    # string representation of uid, the name of the owner
    attr_accessor :owner

    # numeric uid of owner
    attr_accessor :uid

    # an int interpreted in octal, e.g. 0640
    attr_accessor :permissions

    # size of file in bytes
    attr_accessor :size

    # flag that tell whether or not it is OK to register/unregister
    attr_accessor :state_ok

    # a message to give more information about the state_ok flag
    attr_accessor :message

    # one of :regular, :symlink, :directory
    attr_accessor :symbolic_type

    # access time (an int, since Epoch)
    attr_accessor :atime

    # modification time (an int, since Epoch)
    attr_accessor :mtime

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'userfile_id' => :'userfile_id',
        :'name' => :'name',
        :'group' => :'group',
        :'gid' => :'gid',
        :'owner' => :'owner',
        :'uid' => :'uid',
        :'permissions' => :'permissions',
        :'size' => :'size',
        :'state_ok' => :'state_ok',
        :'message' => :'message',
        :'symbolic_type' => :'symbolic_type',
        :'atime' => :'atime',
        :'mtime' => :'mtime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'userfile_id' => :'Integer',
        :'name' => :'String',
        :'group' => :'String',
        :'gid' => :'Integer',
        :'owner' => :'String',
        :'uid' => :'Integer',
        :'permissions' => :'Integer',
        :'size' => :'Integer',
        :'state_ok' => :'BOOLEAN',
        :'message' => :'String',
        :'symbolic_type' => :'String',
        :'atime' => :'Integer',
        :'mtime' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'userfile_id')
        self.userfile_id = attributes[:'userfile_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.has_key?(:'gid')
        self.gid = attributes[:'gid']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.has_key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end

      if attributes.has_key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.has_key?(:'state_ok')
        self.state_ok = attributes[:'state_ok']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'symbolic_type')
        self.symbolic_type = attributes[:'symbolic_type']
      end

      if attributes.has_key?(:'atime')
        self.atime = attributes[:'atime']
      end

      if attributes.has_key?(:'mtime')
        self.mtime = attributes[:'mtime']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          userfile_id == o.userfile_id &&
          name == o.name &&
          group == o.group &&
          gid == o.gid &&
          owner == o.owner &&
          uid == o.uid &&
          permissions == o.permissions &&
          size == o.size &&
          state_ok == o.state_ok &&
          message == o.message &&
          symbolic_type == o.symbolic_type &&
          atime == o.atime &&
          mtime == o.mtime
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [userfile_id, name, group, gid, owner, uid, permissions, size, state_ok, message, symbolic_type, atime, mtime].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CbrainClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
