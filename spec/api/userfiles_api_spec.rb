=begin
#CBRAIN API

#API for interacting with the CBRAIN Platform

OpenAPI spec version: 5.1.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'spec_helper'
require 'json'

# Unit tests for CbrainClient::UserfilesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserfilesApi' do
  before do
    # run before each test
    @instance = CbrainClient::UserfilesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserfilesApi' do
    it 'should create an instance of UserfilesApi' do
      expect(@instance).to be_instance_of(CbrainClient::UserfilesApi)
    end
  end

  # unit tests for userfiles_change_provider_post
  # Moves the Userfiles from their current Data Provider to a new one.
  # @param multi_userfile_mod_req The IDs of the files to move.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_change_provider_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_compress_post
  # Compresses many Userfiles each into their own GZIP archive.
  # @param multi_userfile_mod_req The IDs of the files to compress.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_compress_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_delete_files_delete
  # Delete several files that have been registered as Userfiles
  # @param multi_userfile_mod_req The IDs of the files to destroy.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_delete_files_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_download_post
  # Download several files
  # This method compresses several Userfiles in .gz format and prepares them to be downloaded.
  # @param multi_userfile_mod_req The IDs of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'userfiles_download_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_get
  # List of the Userfiles accessible to the current user.
  # This method returns a list of Userfiles that are available to the current User. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number when paginating. See also the per_page parameter
  # @option opts [Integer] :per_page Size of each page when paginating. See also the page parameter
  # @return [Array<Userfile>]
  describe 'userfiles_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_id_content_get
  # Get the content of a Userfile
  # This method allows you to download the content of a userfile.
  # @param id The ID number of the Userfile to download
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'userfiles_id_content_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_id_get
  # Get information on a Userfile.
  # This method returns information about a single Userfile, specified by its ID. Information returned includes the ID of the owner, the Group (project) it is a part of, a description, information about where the acutal copy of the file currently is, and what the status is of any synhronization operations that may have been requested. 
  # @param id The ID number of the Userfile to get information on.
  # @param [Hash] opts the optional parameters
  # @return [Userfile]
  describe 'userfiles_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_id_put
  # Update information on a Userfile.
  # This method allows a User to update information on a userfile. 
  # @param id The ID number of the Userfile to update.
  # @param userfile_mod_req 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_post
  # Creates a new Userfile and upload its content.
  # This method creates a new Userfile in CBRAIN, with the current user as the owner of the file. 
  # @param upload_file File content to upload to CBRAIN
  # @param data_provider_id The ID of the Data Provider to upload the file to.
  # @param userfile_group_id ID of the group that will have access to the Userfile
  # @param file_type The type of the file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :_do_extract set to the string &#39;on&#39; to indicate that the uploaded content is a tar.gz or .zip archive that need to be extracted. See also the parameter _up_ex_mode
  # @option opts [String] :_up_ex_mode if &#39;_do_extract&#39; is set to &#39;on&#39;, set this to &#39;collection&#39; to create a single collection, or &#39;multiple&#39; to create one file per entry in the uploaded content
  # @return [Object]
  describe 'userfiles_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_sync_multiple_post
  # Syncs Userfiles to the local Data Providers cache.
  # Synchronizing files to their the local cache allows you to download, visualize and do processing on them that is not available if not synced. CBRAIN operations will sync files automatically, and this is only necessary if a file is changed on its host Data Provdier by an external process.
  # @param multi_userfile_mod_req The IDs of the files to synchronize.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_sync_multiple_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for userfiles_uncompress_post
  # Uncompresses many Userfiles.
  # @param multi_userfile_mod_req The IDs of the files to uncompress.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'userfiles_uncompress_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
